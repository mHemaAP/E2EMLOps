name: Deployment 01D - PR - Train and Store

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_ECR_LOGIN_URI:
        required: true
      ECR_REPOSITORY_NAME:
        required: true
      AWS_SECURITY_GROUP_ID:
        required: true
      AWS_SUBNET_ID_1:
        required: true
      PERSONAL_ACCESS_TOKEN:
        required: true

# # When to run this workflow
# on:
#   workflow_dispatch:  # Manual trigger from GitHub UI
  # Uncomment to enable automatic triggers
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
# ECR_REPOSITORY_NAME
# AWS_ECR_LOGIN_URI
# Environment variables used across jobs
env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
  # S3_DATA_PATH: data/                #data/files/md5 

jobs:
  #----------------------------------------
  # JOB 1: Build and push Docker image to ECR
  #----------------------------------------
  build-and-push-ecr-image:
    name: 📦 Build and Push Docker Image
    runs-on: ubuntu-22.04
    outputs:
      # commit_id: ${{ steps.get_commit_id.outputs.commit_id }}
      registry: ${{ steps.login-ecr.outputs.registry }}
      docker_username: ${{ steps.login-ecr.outputs.docker_username_306093656765_dkr_ecr_ap_south_1_amazonaws_com }}
      docker_password: ${{ steps.login-ecr.outputs.docker_password_306093656765_dkr_ecr_ap_south_1_amazonaws_com }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      # - name: Get Latest Commit ID
      #   id: get_commit_id
      #   run: |
      #     latest_commit=$(git rev-parse HEAD)
      #     echo "commit_id=$latest_commit" >> $GITHUB_OUTPUT
      
      # - name: Display the commit ID        
      #   run: |
      #     echo "Latest commit ID is: ${{ steps.get_commit_id.outputs.commit_id }}"

      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build development container image and push to ECR
          echo "Building and pushing image to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build --platform linux/amd64  -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # #----------------------------------------
  # # JOB 2: Launch EC2 instance with GPU for training
  # #----------------------------------------

  launch-runner:
    name: 🚀 Launch EC2 GPU Runner
    runs-on: ubuntu-22.04
    needs: build-and-push-ecr-image
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      # commit_id: ${{ steps.get_commit_id_runner.outputs.commit_id }}
      
    env:
      TF_LOG: DEBUG
      CML_VERBOSE: true 
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Display the commit ID
      #   run: |
      #     echo "Latest commit ID is: ${{ needs.build-and-push-ecr-image.outputs.commit_id }}"

      # - name: Get latest commit ID
      #   id: get_commit_id_runner
      #   run: |
      #     echo "commit_id=${{ needs.build-and-push-ecr-image.outputs.commit_id }}" >> $GITHUB_OUTPUT
      
      - name: Start EC2 runner
        id: start-ec2-runner
        # uses: machulav/ec2-github-runner@v2.3.9
        uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
        with:
          mode: start
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          # AMI with CUDA/GPU drivers
          ec2-image-id: ami-01654480b8a1994bd
          ec2-instance-type: g4dn.xlarge
          ec2-volume-size: 128  
          # AMI with CPU only
          # ec2-image-id: ami-0e35ddab05955cf57
          # ec2-image-id: ami-01654480b8a1994bd
          # ec2-instance-type: t3a.xlarge
          subnet-id: ${{ secrets.AWS_SUBNET_ID_1 }}
          security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
          market-type: "spot"

  #----------------------------------------
  # JOB 3: Train model and deploy
  #----------------------------------------
  do-the-job:
    name: Train Models and Deploy
    needs: [launch-runner]
    runs-on: ${{ needs.launch-runner.outputs.label }}
    # outputs:
    #   commit_id: ${{ steps.get_commit_id_ec2.outputs.commit_id }}
    timeout-minutes: 23
    
    steps:
      # - uses: iterative/setup-cml@v2

      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Test AWS CLI
        run: |
          # Now you can run any AWS CLI command
          aws s3 ls  # Example command to list S3 buckets

      - name: Test GPU
        run: |
          # Now you can run any AWS CLI command
          nvidia-smi

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_LOGIN_URI }}

      - name: Pull Docker image from ECR
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
          ls -a

      # - name: Install requirements
      #   run: |
      #     pip install -r requirements.cpu.txt
      #     pip install pyopenssl --upgrade

      - name: Verify GPU Access via torch and lightining
        run: |
          docker run --gpus all \
            --privileged --ipc=host \
            -e NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics \
            -e NVIDIA_VISIBLE_DEVICES=all \
            --rm ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest \
            python -c "import torch; from lightning.pytorch.accelerators import CUDAAccelerator; print(f'PyTorch CUDA: {torch.cuda.is_available()}'); print(f'Lightning GPUs: {CUDAAccelerator.auto_device_count()}')"

      - name: Run DVC commands in container
        run: |
          docker run --gpus all \
            --privileged --ipc=host \
            -e NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics \
            -e NVIDIA_VISIBLE_DEVICES=all \
            --name session-18-container \
            --shm-size=8g \
            -v "$(pwd):/workspace" \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest \
            /bin/bash -c "
              nvidia-smi
              dvc pull -r myremote && \
              dvc repro -f
              python src/backend/torch_local/transfer_mar.py -p dev 
            "
        # TODO: Add comment to PR of current trained model score and s3-prod score

      - name: Copy S3 Files to output_prod/
        run: |
          mkdir -p output_prod
          for project in sports vegfruits; do
            aws s3 cp \
              s3://mybucket-emlo-mumbai/kserve-ig/${project}-classifier-prod/output_${project}.txt \
              output_prod/output_${project}.txt
          done

      - name: Compare Accuracy and Generate Report
        run: |
          report="# 📊 Accuracy Comparison Report\n"
          for project in sports vegfruits; do
            prod_file="output_prod/output_${project}.txt"
            local_file="output_${project}.txt"

            prod_acc=$(grep -oP '\d+\.\d+' "$prod_file" || echo "0")
            local_acc=$(grep -oP '\d+\.\d+' "$local_file" || echo "0")

            comparison="🔁 $project: local=$local_acc vs prod=$prod_acc"
            if (( $(echo "$local_acc > $prod_acc" | bc -l) )); then
              comparison+=" ✅ Local is better"
            elif (( $(echo "$local_acc < $prod_acc" | bc -l) )); then
              comparison+=" 🔻 Prod is better"
            else
              comparison+=" 🔁 Same accuracy"
            fi

            report+="$comparison\n"
          done

          echo -e "$report" > report.md

      - name: Install Node.js and npm
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Post Comment with CML
        env:
          REPO_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          CML_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          npm install -g @dvcorg/cml
          cml comment create report.md 
          # --pr

      # un comment after debugging
      # - name: Setup dvc
      #   run: |
      #     dvc pull -r myremote

      # - name: Setup dvc
      #   run: |
      #     dvc repro

  #----------------------------------------
  # JOB 4: Stop EC2 runner after completion
  #----------------------------------------
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - launch-runner
      - do-the-job
    runs-on: ubuntu-22.04
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Stop EC2 runner
        # uses: ulav/ec2-githumachb-runner@v2.3.9
        uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
        with:
          mode: stop
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.launch-runner.outputs.label }}
          ec2-instance-id: ${{ needs.launch-runner.outputs.ec2-instance-id }}


# docker run -it --gpus=all \
#             --name session-18-container \
#             --shm-size=8g \
#             -v "$(pwd):/workspace" \
#             -e AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID \
#             -e AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY \
#             -e AWS_DEFAULT_REGION=AWS_REGION \
#             -e AWS_REGION=AWS_REGION \
#             emlo-18-train  \
#             /bin/bash 